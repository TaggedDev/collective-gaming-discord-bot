from discord import app_commands, Embed, Interaction, Color
from discord.ext import tasks
from datetime import datetime, timedelta
from discord.ext.commands import Bot
from steam_web_api import Steam
import time

reminder_tasks = {}

@app_commands.command(name="game", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –∏–∑ Steam")
@app_commands.describe(
    max_players="–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?",
    minutes_delay="–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è?",
    game_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ –≤ Steam)"
)
async def game_embed(interaction: Interaction, max_players: int, minutes_delay: int, game_name: str):
    search_results = steam.apps.search_games(game_name)
    if not search_results.get('apps') or len(search_results['apps']) == 0:
        await interaction.response.send_message(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{game_name}'.", ephemeral=True)
        return

    game = search_results['apps'][0]
    game_id = game['id'][0]
    game_link = game['link']

    game_instance = steam.apps.get_app_details(game_id, country="RU", filters="basic,price_overview")
    if game_instance is None:
        await interaction.response.send_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ —Å ID '{game_id}'.", ephemeral=True)
        return

    game_data = game_instance[str(game_id)]['data']
    image_link = game_data['header_image']
    price = '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if game_data['is_free'] else game_data['price_overview']['final_formatted']
    description = game_data['short_description']

    future_time = datetime.now() + timedelta(minutes=minutes_delay)
    unix_timestamp = int(time.mktime(future_time.timetuple()))

    embed = Embed(
        title=game_name,
        description=description,
        color=Color.blue(),
        url=game_link
    )
    embed.set_author(name=interaction.user.display_name, icon_url=interaction.user.avatar.url)
    embed.add_field(name="–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤?", value=max_players, inline=True)
    embed.add_field(name="–¶–µ–Ω–∞?", value=price, inline=True)
    embed.add_field(name="–ö–æ–≥–¥–∞?", value=f'<t:{unix_timestamp}:R>', inline=True)
    embed.set_image(url=image_link)
    embed.set_footer(text=f"Call by {interaction.user.name}", icon_url=interaction.user.avatar.url)
    embed.timestamp = datetime.now()

    await interaction.response.send_message(embed=embed)
    msg = await interaction.original_response()
    await msg.add_reaction("üíù")  # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é

    reminder_tasks[msg.id] = {
        "users": set(),  # —Å—é–¥–∞ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        "time": future_time
    }

    if not reminder_loop.is_running():
        reminder_loop.start()

# –§—É–Ω–∫—Ü–∏—è setup, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É
async def setup(bot: Bot, _steam: Steam):
    global steam
    steam = _steam
    bot.tree.add_command(game_embed)

    @bot.event
    async def on_reaction_add(reaction, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é."""
        if user.bot:
            return
        if reaction.message.id in reminder_tasks:
            reminder_tasks[reaction.message.id]["users"].add(user)

    @bot.event
    async def on_reaction_remove(reaction, user):
        """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–±—Ä–∞–ª —Ä–µ–∞–∫—Ü–∏—é ‚Äî —É–¥–∞–ª–∏–º –∏–∑ —Å–ø–∏—Å–∫–∞."""
        if user.bot:
            return
        if reaction.message.id in reminder_tasks:
            reminder_tasks[reaction.message.id]["users"].discard(user)

@tasks.loop(seconds=30)
async def reminder_loop():
    now = datetime.now()
    expired = []
    for message_id, data in reminder_tasks.items():
        if now >= data["time"]:
            for user in data["users"]:
                try:
                    await user.send("üîî –í—Ä–µ–º—è –∏–≥—Ä–∞—Ç—å! –ñ–¥—ë–º —Ç–µ–±—è üòâ")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user}: {e}")
            expired.append(message_id)

    # –£–¥–∞–ª–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    for message_id in expired:
        reminder_tasks.pop(message_id, None)